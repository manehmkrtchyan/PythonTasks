# lst = [1, 2, 3, 4]
# start = 0
# end = len(lst) - 1
# key  = 3
# def bin_search(lst, start, end, key):
#     if start <= end:
#         mid = (start + end) // 2
#         if key == lst[mid]:
#             return mid
#         elif key < lst[mid]:
#             return bin_search(lst, start, mid - 1, key)
#         else:
#             return bin_search(lst, mid + 1, end, key)
    
#     return -1
# print(bin_search(lst, start, end, key))




# cache = [0] * 20
# cache[0] = 0
# cache[1] = 1
# def fib(n):
#     if n in (0, 1):
#         return cache[n]
#     if cache[n] == 0:
#         cache[n] = fib(n - 1) + fib(n - 2)
#     return cache[n]
# print(fib(4))

cache = [None] 
cache[0] = 0
cache[1] = 1
def fib(n):
    
    if n in (0, 1):
        return cache[n]
    if fib[n] not in cache:
        cache[n] = fib(n - 1) + fib(n - 2)
        cache.append(cache[n])
    return cache[n]
print(fib(4))